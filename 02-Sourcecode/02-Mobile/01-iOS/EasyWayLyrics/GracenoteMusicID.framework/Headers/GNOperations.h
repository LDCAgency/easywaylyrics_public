//
//  iOSMobileSDK
//  Copyright Gracenote Inc. 2010. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <MediaPlayer/MediaPlayer.h>

@protocol GNFingerprintResultReady;
@protocol GNSearchResultReady;
@class GNSampleBuffer;
@class GNAudioSource;
@class GNSearchResultReady;
@class GNSearchResult;

/**
 * This class contains the operations that can be performed by the Mobile Client.
 * Each operation is implemented as a static method.
 * 
 * There are three types of operations provided:
 * <ul>
 * <li>Audio recognition operations</li>
 * <li>Fingerprint generation operations</li>
 * <li>Search operations</li>
 * </ul>
 * 
 * To invoke an operation, call the associated method. While an operation is
 * running, progress notifications can be received by the application. When an
 * operation completes, results are delivered via a Result Ready Object.
 * Operations can be canceled.
 * 
 * For more information, see the Mobile Client Implementation Guide.
 */
@interface GNOperations : NSObject {
    
}

/**
 * Records audio from the microphone and generates a fingerprint. The generated
 * fingerprint can be used to search Gracenote's database for matches using 
 * Gracenote's MusicID-Stream product.
 * @param resultReady Result Ready Object instance
 * @param config Operation configuration
 */
 
+ (void) fingerprintMIDStreamFromMic:(id<GNFingerprintResultReady>)resultReady
                              config:(GNConfig*)config;

/**
 * Generates a fingerprint for a PCM audio sample. The generated
 * fingerprint can be used to search Gracenote's database for matches 
 * using Gracenote's MusicID-Stream product.
 * @param resultReady Result Ready Object instance
 * @param config Operation configuration
 * @param sampleBuffer Buffer object containing the PCM audio sample
 */

+ (void) fingerprintMIDStreamFromPcm:(id<GNFingerprintResultReady>)resultReady
                              config:(GNConfig*)config
                        sampleBuffer:(GNSampleBuffer*)sampleBuffer;

/**
 * Generates a fingerprint for an audio file. The generated
 * fingerprint can be used to search Gracenote's database for matches 
 * using Gracenote's MusicID-File product.
 * @param resultReady Result Ready Object instance
 * @param config Operation configuration
 * @param sampleBuffer Buffer object containing the PCM audio sample
 */

+ (void) fingerprintMIDFileFromFile:(id<GNFingerprintResultReady>)resultReady
                              config:(GNConfig*)config
                        fileUrl:(NSURL*)sampleFileUrl;


/**
 * Records audio from the microphone and recognizes it using Gracenote's
 * MusicID-Stream product.
 * @param resultReady Result Ready Object instance
 * @param config Operation configuration
 */

+ (void) recognizeMIDStreamFromMic:(id<GNSearchResultReady>)resultReady
                            config:(GNConfig*)config;

/**
 * Recognizes a PCM audio sample using Gracenote's MusicID-Stream product.
 * @param resultReady Result Ready Object instance
 * @param config oOperation configuration
 * @param sampleBuffer Buffer object containing the PCM audio sample
 */

+ (void) recognizeMIDStreamFromPcm:(id<GNSearchResultReady>)resultReady
                            config:(GNConfig*)config
                      sampleBuffer:(GNSampleBuffer*)sampleBuffer;

/**
 * Searches Gracenote's database for matches to a fingerprint
 * previously generated by a fingerprint generation operation.
 * @param resultReady Result Ready Object instance
 * @param config Operation configuration
 * @param fingerprintData Fingerprint generated by an operation
 */

+ (void) searchByFingerprint:(id<GNSearchResultReady>)resultReady
                      config:(GNConfig*)config
             fingerprintData:(NSString*)fingerprintData;

/**
 * Searches Gracenote's database for matches to artist name, album title, and
 * track title. Not all fields are required. For best results, provide data for
 * as many fields as possible.
 * @param resultReady Result Ready Object instance
 * @param config Operation configuration
 * @param artist Artist name
 * @param albumTitle Album title
 * @param trackTitle Track title
 */

+ (void) searchByText:(id<GNSearchResultReady>)resultReady
               config:(GNConfig*)config
               artist:(NSString*)artist
           albumTitle:(NSString*)albumTitle
           trackTitle:(NSString*)trackTitle;

/**
 * Searches Gracenote's database for matches to artist name and lyric
 * fragment. Artist name is not required. For best results,
 * provide artist name when possible.
 * @param resultReady Result Ready Object instance
 * @param config Operation configuration
 * @param lyricFragment Fragment of track lyrics 
 * @param artist Artist name
 */

+ (void) searchByLyricFragment:(id<GNSearchResultReady>)resultReady
                        config:(GNConfig*)config
                 lyricFragment:(NSString*)lyricFragment
                        artist:(NSString*)artist;

/**
 * Fetches an album record from Gracenote's database by its album identifier.
 * @param resultReady Result Ready Object instance
 * @param config Operation configuration
 * @param albumId Album identifier
 */

+ (void) fetchByAlbumId:(id<GNSearchResultReady>)resultReady
				config:(GNConfig*)config
				 albumId:(NSString*)albumId;


/**
 * Fetches a track record from Gracenote's database by its track identifier.
 * @param resultReady Result Ready Object instance
 * @param config Operation configuration
 * @param trackId Track identifier
 */

+ (void) fetchByTrackId:(id<GNSearchResultReady>)resultReady
				 config:(GNConfig*)config
				trackId:(NSString*)trackId;

/**
 * Recognizes an audio file using Gracenote's MusicID-File product.
 * @param resultReady Result Ready Object instance
 * @param config Operation configuration
 * @param sampleFileUrl The file path noted in filePathURL or MPMediaItemPropertyAssetURL
 */
+ (void) recognizeMIDFileFromFile:(id<GNSearchResultReady>)resultReady
						   config:(GNConfig*)config
						  fileUrl:(NSURL*)sampleFileUrl;

/**
 * Fetches a track record from Gracenote's database by retrieving info from files in specified folder.
 * @param resultReady : Result Ready Object instance
 * @param config : Operation configuration
 * @param directoryPath : Path of directory to be scanned for operation.
 */
+(void)albumIdDirectory: (id<GNSearchResultReady>)resultReady 
				 config: (GNConfig*)config 
		  directoryPath: (NSString *)directoryPath;

/**
 * Fetches a track record from Gracenote's database by retrieving info from files in given file paths.
 * @param resultReady : Result Ready Object instance
 * @param config : Operation configuration
 * @param filePaths : Paths of files for AlbumId lookup
 */
+(void)albumIdFile: (id<GNSearchResultReady>)resultReady 
			config: (GNConfig*)config 
		 filePaths: (NSArray *)filePaths;

/**
 * Fetches a track record from Gracenote's database by retrieving info from files in given MPMediaItemCollection.
 * @param resultReady : Result Ready Object instance
 * @param config : Operation configuration
 * @param collection : MPMediaItemCollection for AlbumId lookup
 */
+(void)albumIdFromMPMediaItemCollection: (id<GNSearchResultReady>)resultReady
								 config: (GNConfig*)config
							 collection: (MPMediaItemCollection *)collection;

/**
 * Fetches a track record from Gracenote's database by retrieving info from files in given MPMediaItemCollection.
 * @param resultReady : Result Ready Object instance
 * @param config : Operation configuration
 * @param mpMediaItems : Array containing MPMediaItem objects for AlbumId lookup
 */
+(void)albumIdFileFromMPMediaItems: (id<GNSearchResultReady>)resultReady
							config: (GNConfig*)config
							 items: (NSArray *)mpMediaItems;

/**
 * Fetches a track record from Gracenote's database using info from GNAlbumIdAttributes in given Array.
 * @param resultReady Result Ready Object instance
 * @param config Operation configuration
 * @param attributeList : Array containing elements of GNAlbumIdAttributes for AlbumID lookup
 */
+(void)albumIdList: (id<GNSearchResultReady>)resultReady 
			config: (GNConfig*)config 
			  list: (NSArray *)attributeList;

/** Cancels a fingerprint generation operation that is currently running.
 * @param resultReady Result Ready Object instance that is provided to the
 * operation when it is invoked
 */

+ (void) cancel:(id)resultReady;

/** Cancels all operations that are currently in queue.
 */
 
+ (void) cancelAll;


@end
